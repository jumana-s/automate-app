# This workflow will test, buil,d and push a new container image to Amazon ECR,
#  when there is a push to the "main" branch or a PR opened.

name: Push Image to ECR

on:
  push:
    branches: ["main"]
    paths:
      - src/**
      - ".github/workflows/push.yml"
  pull_request:
    paths:
      - src/**
      - ".github/workflows/push.yml"

env:
  AWS_REGION: us-east-1 # set this to your preferred AWS region
  ECR_REPOSITORY: simple-api-app-images # set this to your Amazon ECR repository name
  CONTAINER_NAME: app # set this to the name of the container
  WORKING_DIR: "src" # set to working directory

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - name: Test
        run: go test -v
        working-directory: ${{ env.WORKING_DIR }}

      - name: Run static code analysis
        uses: dominikh/staticcheck-action@v1.3.0
        with:
          version: "2022.1.3"
          working-directory: ${{ env.WORKING_DIR }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
